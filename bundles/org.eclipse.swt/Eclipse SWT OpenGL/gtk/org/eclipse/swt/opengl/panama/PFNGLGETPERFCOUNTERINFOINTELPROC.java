// Generated by jextract

package org.eclipse.swt.opengl.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface PFNGLGETPERFCOUNTERINFOINTELPROC {

    void apply(int x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3, int x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7, jdk.incubator.foreign.MemoryAddress x8, jdk.incubator.foreign.MemoryAddress x9, jdk.incubator.foreign.MemoryAddress x10);
    static NativeSymbol allocate(PFNGLGETPERFCOUNTERINFOINTELPROC fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PFNGLGETPERFCOUNTERINFOINTELPROC.class, fi, constants$710.PFNGLGETPERFCOUNTERINFOINTELPROC$FUNC, "(IIILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
    }
    static PFNGLGETPERFCOUNTERINFOINTELPROC ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("PFNGLGETPERFCOUNTERINFOINTELPROC::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (int x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3, int x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7, jdk.incubator.foreign.MemoryAddress x8, jdk.incubator.foreign.MemoryAddress x9, jdk.incubator.foreign.MemoryAddress x10) -> {
            try {
                constants$710.PFNGLGETPERFCOUNTERINFOINTELPROC$MH.invokeExact(symbol, x0, x1, x2, (jdk.incubator.foreign.Addressable)x3, x4, (jdk.incubator.foreign.Addressable)x5, (jdk.incubator.foreign.Addressable)x6, (jdk.incubator.foreign.Addressable)x7, (jdk.incubator.foreign.Addressable)x8, (jdk.incubator.foreign.Addressable)x9, (jdk.incubator.foreign.Addressable)x10);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


