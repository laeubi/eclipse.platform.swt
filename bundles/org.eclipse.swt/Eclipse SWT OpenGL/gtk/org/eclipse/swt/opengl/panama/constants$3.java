// Generated by jextract

package org.eclipse.swt.opengl.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$3 {

    static final FunctionDescriptor glEdgeFlagv$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle glEdgeFlagv$MH = RuntimeHelper.downcallHandle(
        "glEdgeFlagv",
        constants$3.glEdgeFlagv$FUNC, false
    );
    static final FunctionDescriptor glScissor$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle glScissor$MH = RuntimeHelper.downcallHandle(
        "glScissor",
        constants$3.glScissor$FUNC, false
    );
    static final FunctionDescriptor glClipPlane$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle glClipPlane$MH = RuntimeHelper.downcallHandle(
        "glClipPlane",
        constants$3.glClipPlane$FUNC, false
    );
    static final FunctionDescriptor glGetClipPlane$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle glGetClipPlane$MH = RuntimeHelper.downcallHandle(
        "glGetClipPlane",
        constants$3.glGetClipPlane$FUNC, false
    );
    static final FunctionDescriptor glDrawBuffer$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle glDrawBuffer$MH = RuntimeHelper.downcallHandle(
        "glDrawBuffer",
        constants$3.glDrawBuffer$FUNC, false
    );
    static final FunctionDescriptor glReadBuffer$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle glReadBuffer$MH = RuntimeHelper.downcallHandle(
        "glReadBuffer",
        constants$3.glReadBuffer$FUNC, false
    );
}


