// Generated by jextract

package org.eclipse.swt.opengl.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface PFNGLCOLORFRAGMENTOP3ATIPROC {

    void apply(int x0, int x1, int x2, int x3, int x4, int x5, int x6, int x7, int x8, int x9, int x10, int x11, int x12);
    static NativeSymbol allocate(PFNGLCOLORFRAGMENTOP3ATIPROC fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PFNGLCOLORFRAGMENTOP3ATIPROC.class, fi, constants$493.PFNGLCOLORFRAGMENTOP3ATIPROC$FUNC, "(IIIIIIIIIIIII)V", scope);
    }
    static PFNGLCOLORFRAGMENTOP3ATIPROC ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("PFNGLCOLORFRAGMENTOP3ATIPROC::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (int x0, int x1, int x2, int x3, int x4, int x5, int x6, int x7, int x8, int x9, int x10, int x11, int x12) -> {
            try {
                constants$493.PFNGLCOLORFRAGMENTOP3ATIPROC$MH.invokeExact(symbol, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


