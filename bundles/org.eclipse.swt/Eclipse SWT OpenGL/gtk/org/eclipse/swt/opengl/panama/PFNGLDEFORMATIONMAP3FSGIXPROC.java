// Generated by jextract

package org.eclipse.swt.opengl.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface PFNGLDEFORMATIONMAP3FSGIXPROC {

    void apply(int x0, float x1, float x2, int x3, int x4, float x5, float x6, int x7, int x8, float x9, float x10, int x11, int x12, jdk.incubator.foreign.MemoryAddress x13);
    static NativeSymbol allocate(PFNGLDEFORMATIONMAP3FSGIXPROC fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PFNGLDEFORMATIONMAP3FSGIXPROC.class, fi, constants$894.PFNGLDEFORMATIONMAP3FSGIXPROC$FUNC, "(IFFIIFFIIFFIILjdk/incubator/foreign/MemoryAddress;)V", scope);
    }
    static PFNGLDEFORMATIONMAP3FSGIXPROC ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("PFNGLDEFORMATIONMAP3FSGIXPROC::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (int x0, float x1, float x2, int x3, int x4, float x5, float x6, int x7, int x8, float x9, float x10, int x11, int x12, jdk.incubator.foreign.MemoryAddress x13) -> {
            try {
                constants$894.PFNGLDEFORMATIONMAP3FSGIXPROC$MH.invokeExact(symbol, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, (jdk.incubator.foreign.Addressable)x13);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


